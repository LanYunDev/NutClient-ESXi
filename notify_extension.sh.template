#!/bin/sh

# 获取ESXi主机信息
ESXI_VERSION=$(esxcli system version get | grep -i "Version" | awk '{print $NF}')
ESXI_CPU_VERSION=$(vsish -e get /hardware/cpu/cpuModelName)
ESXI_CPU_USAGE=$(vsish -e get $(printf 'power/pcpu/%sperf ' $(vsish -e ls power/pcpu)) | awk '/current/ {cpus+=1;total+=$6} END {print total/cpus "%"}')
# ESXI_MEMORY=$(esxcli hardware memory get | grep -i "Physical Memory" | awk '{print $NF}')
# ESXI_DISK=$(esxcli storage core device list | grep -i "Is SSD" | grep -i "false" | wc -l)
# ESXI_NETWORK=$(esxcli network nic list | wc -l)

echo "ESXI 版本: $ESXI_VERSION"
echo "CPU 型号: $ESXI_CPU_VERSION"
# CPU数量 CPU核心数 CPU线程数
vsish -e get /hardware/cpu/cpuInfo | sed 's/:/ /' | awk '/Number of packages/ {packages=$NF} /Number of cores/ {cores=$NF} /Number of CPUs \(threads\) /{threads=$NF} END{printf "CPU数量: %s  CPU核心数: %s  CPU线程数: %s\n", packages, cores, threads}'
echo ""
echo "CPU 使用百分比: $ESXI_CPU_USAGE"
# PCPU 当前占比
vsish -e get $(printf 'power/pcpu/%sperf ' $(vsish -e ls power/pcpu)) | awk '
BEGIN {
    pcpu_count = 0;
}
/PCPU performance statistics \{/ {
    if (pcpu_count && pcpu_count % 2 == 0) {
        printf "\n";  # Add newline for every 4th entry (except the first one)
    }
    pcpu_count++;
}
/PCPU core busy \(current frequency\):/ {
    match($0, /[0-9]+/);  # Extract the current frequency value
    pcpu_current_freq = substr($0, RSTART, RLENGTH);
    printf "PCPU %d 当前占比: %s %%    ", pcpu_count-1, pcpu_current_freq;
}
END {
    printf "\n";
}
'

# 内存使用情况
vsish -e get /memory/comprehensive | sed 's/:/ /' | awk '
    /Phys/ { phys = $(NF-1); units = $NF; width = length(phys) }
    /Free/ { free = $(NF-1) }
    END    {
        phys_GB = phys / (1024*1024);
        used_GB = (phys - free) / (1024*1024);
        free_GB = free / (1024*1024);
        usage_percent = used_GB / phys_GB * 100;
        printf "内存 可用: %.2f GB  已用: %.2f GB (%.2f%%)  容量: %.2f GB\n", free_GB, used_GB, usage_percent, phys_GB
    }'

# 获取虚拟机信息
echo ""
echo "虚拟机使用情况："

VMS_INFO=$(vim-cmd vmsvc/getallvms | sed -e '1d') # 获取虚拟机列表，去掉标题行

# 保存IFS分隔符，并设置IFS为换行符，以便逐行读取虚拟机信息
OLDIFS=$IFS
IFS=$'\n'

# 逐行处理虚拟机信息
for vm_info in $VMS_INFO; do
    VM_ID=$(echo "$vm_info" | awk '{print $1}')
    VM_NAME=$(echo "$vm_info" | awk '{print $2}')
    VM_FILE=$(echo "$vm_info" | awk '{print $3 " " $4}')
    VM_GUEST_OS=$(echo "$vm_info" | awk '{print $5}')
    VM_VERSION=$(echo "$vm_info" | awk '{print $6}')
  VM_ANNOTATION=$(echo "$vm_info" | awk '{print $7}')
    # VM_ANNOTATION=$(echo "$vm_info" | awk '{$1=$2=$3=$4=$5=""; print $0}' | sed -e 's/^[ \t]*//')

    # 获取虚拟机电源状态
    VM_POWER_STATE=$(vim-cmd vmsvc/power.getstate $VM_ID | grep "Powered" | awk '{print $NF}')

    echo "虚拟机名称: $VM_NAME"

    if [ "$VM_POWER_STATE" = "on" ]; then
        # 获取虚拟机摘要信息
        SUMMARY=$(vim-cmd vmsvc/get.summary $VM_ID)

        # 解析虚拟机摘要信息，获取所需的数据
    CPU_USAGE=$(echo "$SUMMARY" | awk -F '= ' '/overallCpuUsage/{gsub(/[^0-9]/,"",$2); print $2}')
    HOST_MEMORY_USAGE=$(echo "$SUMMARY" | awk -F '= ' '/hostMemoryUsage/{gsub(/[^0-9]/,"",$2); print $2}')
    GUEST_MEMORY_USAGE=$(echo "$SUMMARY" | awk -F '= ' '/guestMemoryUsage/{gsub(/[^0-9]/,"",$2); print $2}')
    COMMITTED=$(echo "$SUMMARY" | awk -F '= ' '/  committed/{gsub(/[^0-9]/,"",$2); print $2}')
    UNCOMMITTED=$(echo "$SUMMARY" | awk -F '= ' '/uncommitted/{gsub(/[^0-9]/,"",$2); print $2}')
    UNSHARED=$(echo "$SUMMARY" | awk -F '= ' '/unshared/{gsub(/[^0-9]/,"",$2); print $2}')
    IP_ADDRESS=$(echo "$SUMMARY" | grep "ipAddress" | awk -F '= ' '{print $2}' | sed 's/[^0-9\.]*//g')

    # 如果CPU_USAGE大于1024，则转换为GB
    if [ $CPU_USAGE -ge 1024 ]; then
        CPU_USAGE=$(awk "BEGIN {printf \"%.2f\", $CPU_USAGE / 1024}")" GHz"
    else
      CPU_USAGE=$CPU_USAGE" MHz"
    fi
    if [ $HOST_MEMORY_USAGE -ge 1024 ]; then
        HOST_MEMORY_USAGE=$(awk "BEGIN {printf \"%.2f\", $HOST_MEMORY_USAGE / 1024}")" GB"
    else
      HOST_MEMORY_USAGE=$HOST_MEMORY_USAGE" MB"
    fi
    if [ $GUEST_MEMORY_USAGE -ge 1024 ]; then
        GUEST_MEMORY_USAGE=$(awk "BEGIN {printf \"%.2f\", $GUEST_MEMORY_USAGE / 1024}")" GB"
    else
      GUEST_MEMORY_USAGE=$GUEST_MEMORY_USAGE" MB"
    fi
    COMMITTED=$(awk "BEGIN {printf \"%.2f\", $COMMITTED/1024/1024/1024}")
    UNCOMMITTED=$(awk "BEGIN {printf \"%.2f\", $UNCOMMITTED/1024/1024/1024}")
    UNSHARED=$(awk "BEGIN {printf \"%.2f\", $UNSHARED/1024/1024/1024}")

    echo "  电源状态: 开启"
    echo "  存储位置: $VM_FILE"
    echo "  操作系统: $VM_GUEST_OS"
        echo "  CPU 使用:   $CPU_USAGE"
        echo "  已消耗内存: $HOST_MEMORY_USAGE  活动的内存: $GUEST_MEMORY_USAGE"
    echo "  已使用存储: $COMMITTED GB  未使用存储: $UNCOMMITTED GB  未共享: $UNSHARED GB"
    if [ $IP_ADDRESS ]; then
          echo "  IPv4 地址: $IP_ADDRESS"
    fi
    else
        echo "  电源状态: 关闭"
    fi

  echo "  Vmid: $VM_ID   版本: $VM_VERSION"
  if [ $VM_ANNOTATION ]; then
        echo "  备注: $VM_ANNOTATION"
  fi

done

# 还原IFS分隔符
IFS=$OLDIFS

echo ""
echo "硬盘信息"
esxcli storage core device list | awk -F': ' '
BEGIN {
    printf "%-20s %-5s %-10s \n", "型号", "SSD", "容量(GB)"
    printf "============================================\n"
}
/Model:/ {
  model = $2
}
/   Is SSD:/ {
    ssd = ($2 == "true") ? "是" : "否"
}
/Size:/ {
  if ( $2 != 0) {
    size = $2 /1024
  }
}
/Thin Provisioning Status:/ {
  printf "%-20s %-5s %-10s \n", model, ssd, size
}'
df -h | awk 'BEGIN{printf "%-15s %-10s %-10s %-8s %-12s %-0s\n", "文件系统", "大小", "已用", "可用", "使用率", "挂载点"} /datastore/{printf "%-10s %-8s %-8s %-8s %-5s %-0s\n", $1, $2, $3, $4, $5, $6}'

echo ""
echo "ESXI网络信息"
echo "IPv4 外网地址: "$(wget -qO- 4.ipw.cn)
esxcli network ip interface ipv4 get | awk 'BEGIN{printf "%-8s %-15s %-19s %-18s %-18s %-12s %-0s\n", "名称", "IPv4地址", "子网掩码", "广播地址", "地址类型", "网关", "DHCP DNS"} NR>1{printf "%-5s %-13s %-14s %-15s %-12s %-13s %-0s\n", $1, $2, $3, $4, $5, $6, $7}'
if [[ $(esxcli network ip interface ipv6 get | awk '$2 == "true" {print $2}') ]];then
  esxcli network ip interface ipv6 get | awk 'BEGIN{printf "%-7s %-14s %-18s %-17s %-10s %-6s %-0s\n", "名称", "IPv6地址", "IPv6启用", "DHCPv6启用", "路由广告启用", "DHCP DNS", "网关"} NR>1{printf "%-5s %-12s %-15s %-18s %-13s %-10s %-0s\n", $1, $2, $3, $4, $5, $6, $7}'
  echo "IPv6 外网地址: "$(wget -qO- 6.ipw.cn)
fi

# 获取主要日志
echo ""
echo "主要日志: "

# 获取今天日期
today=$(date +"%Y-%m-%d")
set_log_line=25

# 读取日志文件列表
log_files="/scratch/log/syslog.log \
           /scratch/log/vmkernel.log \
           /scratch/log/hostd.log \
           /scratch/log/vmkwarning.log \
           /scratch/log/vmksummary.log \
           /scratch/log/vmkeventd.log \
           /scratch/log/auth.log" 

# 使用循环处理每个日志文件
for log_file in $log_files; do
    # 检查日志文件是否存在
    if [ -f "$log_file" ]; then
        echo "===  $(basename "$log_file")  ==="

        # 根据日期过滤日志，并统计日志行数
    today_logs=$(grep "^$today" "$log_file")
    #today_logs=$(awk -v today="$today" '$1 == today' "$log_file")
    #log_count=$(awk -v today="$today" '$1 == today' "$log_file" | wc -l)
    log_count=$(grep "^$today" "$log_file" | wc -l)

    # 如果今天的日志为空，则输出最近的$set_log_line日志
    # 如果今天日志行数大于$set_log_line，则读取最近的$set_log_line条日志
        if [ -z "$today_logs" ]; then
      echo "=== 今日日志为空 ==="
      echo "=== 最近"$set_log_line"条日志 ==="
      tail -n $set_log_line "$log_file"
        elif [ "$log_count" -gt $set_log_line ]; then
      echo "=== 输出今日日志 ==="
      echo "=== 最近"$set_log_line"条日志 ==="
      tail -n $set_log_line "$log_file" | grep "^$today"
    else
      echo "=== 输出今日日志 ==="
      echo "$today_logs"
        fi

        echo "===================="
        echo
    else
        echo "未找到日志文件: $log_file"
        echo
    fi
done

{
  # 获取当前小时数
    current_hour=$(date +%H)
    
    # 获取当前秒数并将其归一化到0到1之间
    current_seconds=$(date +%S)
    random_number=$(awk "BEGIN {print $current_seconds / 60}")

    # 根据时间和随机数来决定是否输出"Powered By LanYun"
    if [ "$current_hour" -ge 6 ] && [ "$current_hour" -lt 18 ]; then
        # 在白天时间范围（6点到18点）有50%的概率输出
        if [ "$(awk -v rn="$random_number" 'BEGIN {print (rn < 0.5) ? 1 : 0}')" -eq 1 ]; then
            echo "Powered By LanYun"
            echo "Blog: https://lanyundev.com/"
        fi
    else
        # 在其他时间段有70%的概率输出
        if [ "$(awk -v rn="$random_number" 'BEGIN {print (rn < 0.7) ? 1 : 0}')" -eq 1 ]; then
            echo "Powered By LanYun"
            echo "Blog: https://lanyundev.com/"
        fi
    fi
}

exit 0